{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Input, NativeBaseProvider, Button } from 'native-base';\nimport * as Google from 'expo-auth-session/providers/google';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Login(_ref) {\n  var navigation = _ref.navigation;\n\n  var _Google$useAuthReques = Google.useAuthRequest({\n    expoClientId: '833113095644-ciah7c3mgv07h6ri46fb48abfagoeo0q.apps.googleusercontent.com'\n  }),\n      _Google$useAuthReques2 = _slicedToArray(_Google$useAuthReques, 3),\n      request = _Google$useAuthReques2[0],\n      response = _Google$useAuthReques2[1],\n      promptAsync = _Google$useAuthReques2[2];\n\n  var access_token;\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === 'success') {\n      access_token = response.authentication.accessToken;\n      checkExistingUser();\n    }\n  }, [response]);\n\n  function checkExistingUser() {\n    var googleUser, googleEmail, userList, _iterator, _step, user;\n\n    return _regeneratorRuntime.async(function checkExistingUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetchUserGoogleInfo(access_token));\n\n          case 2:\n            googleUser = _context.sent;\n            googleEmail = googleUser.email;\n            console.log(\"Google Email:\", googleEmail);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(fetchUserList());\n\n          case 7:\n            userList = _context.sent;\n            _iterator = _createForOfIteratorHelperLoose(userList);\n\n          case 9:\n            if ((_step = _iterator()).done) {\n              _context.next = 17;\n              break;\n            }\n\n            user = _step.value;\n            console.log(\"current user email:\", user.email);\n\n            if (!(user.email == googleEmail)) {\n              _context.next = 15;\n              break;\n            }\n\n            navigation.navigate(\"Home\", user);\n            return _context.abrupt(\"return\");\n\n          case 15:\n            _context.next = 9;\n            break;\n\n          case 17:\n            navigation.navigate(\"Signup\");\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function fetchUserGoogleInfo(token) {\n    var response;\n    return _regeneratorRuntime.async(function fetchUserGoogleInfo$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://www.googleapis.com/oauth2/v3/userinfo?access_token=\" + token, {\n              method: 'GET',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              }\n            }));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function fetchUserList() {\n    var response;\n    return _regeneratorRuntime.async(function fetchUserList$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(fetch('http://52.70.229.148:8000/users/', {\n              method: 'GET',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application.json'\n              }\n            }));\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsx(NativeBaseProvider, {\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(View, {\n        style: styles.Middle,\n        children: _jsx(Text, {\n          style: styles.LoginText,\n          children: \"Login\"\n        })\n      }), _jsxs(View, {\n        style: styles.text2,\n        children: [_jsx(Text, {\n          children: \"Don't have an account? \"\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate(\"Signup\");\n          },\n          children: _jsx(Text, {\n            style: styles.signupText,\n            children: \" Sign up\"\n          })\n        })]\n      }), _jsx(View, {\n        style: styles.buttonStyle,\n        children: _jsx(Button, {\n          style: styles.buttonDesign,\n          disabled: !request,\n          title: \"Login\",\n          onPress: function onPress() {\n            promptAsync();\n          },\n          children: \" LOGIN WITH GOOGLE\"\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  LoginText: {\n    marginTop: 100,\n    fontSize: 30,\n    fontWeight: 'bold'\n  },\n  Middle: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  text2: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    paddingTop: 5\n  },\n  signupText: {\n    fontWeight: 'bold'\n  },\n  emailField: {\n    marginTop: 30,\n    marginLeft: 15\n  },\n  emailInput: {\n    marginTop: 10,\n    marginRight: 5\n  },\n  buttonStyle: {\n    marginTop: 30,\n    marginLeft: 15,\n    marginRight: 15,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonStyleX: {\n    marginTop: 12,\n    marginLeft: 15,\n    marginRight: 15\n  },\n  buttonDesign: {\n    backgroundColor: '#026efd'\n  },\n  lineStyle: {\n    flexDirection: 'row',\n    marginTop: 30,\n    marginLeft: 15,\n    marginRight: 15,\n    alignItems: 'center'\n  },\n  imageStyle: {\n    width: 80,\n    height: 80,\n    marginLeft: 20\n  },\n  boxStyle: {\n    flexDirection: 'row',\n    marginTop: 30,\n    marginLeft: 15,\n    marginRight: 15,\n    justifyContent: 'space-around'\n  }\n});","map":{"version":3,"sources":["C:/Users/Keven/Desktop/EC530/HealthCare-Platform/HealthApp/screens/Login.js"],"names":["React","Input","NativeBaseProvider","Button","Google","Login","navigation","useAuthRequest","expoClientId","request","response","promptAsync","access_token","useEffect","type","authentication","accessToken","checkExistingUser","fetchUserGoogleInfo","googleUser","googleEmail","email","console","log","fetchUserList","userList","user","navigate","token","fetch","method","headers","Accept","json","styles","container","Middle","LoginText","text2","signupText","buttonStyle","buttonDesign","StyleSheet","create","flex","backgroundColor","marginTop","fontSize","fontWeight","alignItems","justifyContent","flexDirection","paddingTop","emailField","marginLeft","emailInput","marginRight","buttonStyleX","lineStyle","imageStyle","width","height","boxStyle"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\r\nimport { Input, NativeBaseProvider, Button } from 'native-base';\r\nimport * as Google from 'expo-auth-session/providers/google'\r\n\r\nexport default function Login({ navigation }) { \r\n  const [request, response, promptAsync] = Google.useAuthRequest({\r\n    expoClientId: '833113095644-ciah7c3mgv07h6ri46fb48abfagoeo0q.apps.googleusercontent.com'\r\n  });\r\n\r\n  var access_token;\r\n\r\n  React.useEffect(() => {\r\n    if (response?.type === 'success') {\r\n      access_token = response.authentication.accessToken;\r\n      checkExistingUser();\r\n    }\r\n  }, [response]);\r\n\r\n  async function checkExistingUser() {\r\n    const googleUser = await fetchUserGoogleInfo(access_token);\r\n    var googleEmail = googleUser.email;\r\n    console.log(\"Google Email:\", googleEmail)\r\n\r\n    var userList = await fetchUserList();\r\n    for (const user of userList) {\r\n      console.log(\"current user email:\", user.email)\r\n      if (user.email == googleEmail) {\r\n        navigation.navigate(\"Home\", user);\r\n        return;\r\n      }\r\n    }\r\n    navigation.navigate(\"Signup\");\r\n  }\r\n\r\n  async function fetchUserGoogleInfo(token) {\r\n    const response = await fetch(`https://www.googleapis.com/oauth2/v3/userinfo?access_token=${token}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n  \r\n    return await response.json();\r\n  }\r\n\r\n  async function fetchUserList() {\r\n      const response = await fetch ('http://52.70.229.148:8000/users/', {\r\n      method: 'GET',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application.json'\r\n      },\r\n    });\r\n\r\n    return await response.json()\r\n  }\r\n  \r\n  return (\r\n    <NativeBaseProvider>\r\n      <View style={styles.container}>\r\n        <View style={styles.Middle}>\r\n          <Text style={styles.LoginText}>Login</Text>\r\n        </View>\r\n        <View style={styles.text2}>\r\n          <Text>Don't have an account? </Text>\r\n          <TouchableOpacity onPress={() => navigation.navigate(\"Signup\")} ><Text style={styles.signupText}> Sign up</Text></TouchableOpacity>\r\n        </View>\r\n\r\n        {/* Button */}\r\n        <View style={styles.buttonStyle}>\r\n          <Button\r\n            style={styles.buttonDesign}\r\n            disabled={!request}\r\n            title=\"Login\"\r\n            onPress={() => {promptAsync();}}> LOGIN WITH GOOGLE\r\n          </Button>\r\n        </View>\r\n      </View>\r\n    </NativeBaseProvider>\r\n  );\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n  },\r\n  LoginText: {\r\n    marginTop:100,\r\n    fontSize:30,\r\n    fontWeight:'bold',\r\n  },\r\n  Middle:{\r\n    alignItems:'center',\r\n    justifyContent:'center',\r\n  },\r\n  text2:{\r\n    flexDirection:'row',\r\n    justifyContent:'center',\r\n    paddingTop:5\r\n  },\r\n  signupText:{\r\n    fontWeight:'bold'\r\n  },\r\n  emailField:{\r\n    marginTop:30,\r\n    marginLeft:15\r\n  },\r\n  emailInput:{\r\n    marginTop:10,\r\n    marginRight:5\r\n  },\r\n  buttonStyle:{\r\n    marginTop:30,\r\n    marginLeft:15,\r\n    marginRight:15,\r\n    alignItems:'center',\r\n    justifyContent: 'center'\r\n  },\r\n  buttonStyleX:{\r\n    marginTop:12,\r\n    marginLeft:15,\r\n    marginRight:15\r\n  },\r\n  buttonDesign:{\r\n    backgroundColor:'#026efd'\r\n  },\r\n  lineStyle:{\r\n    flexDirection:'row',\r\n    marginTop:30,\r\n    marginLeft:15,\r\n    marginRight:15,\r\n    alignItems:'center'\r\n  },\r\n  imageStyle:{\r\n    width:80,\r\n    height:80,\r\n    marginLeft:20,\r\n  },\r\n  boxStyle:{\r\n    flexDirection:'row',\r\n    marginTop:30,\r\n    marginLeft:15,\r\n    marginRight:15,\r\n    justifyContent:'space-around'\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}